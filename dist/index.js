(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@lezer/lr'), require('@lezer/highlight')) :
  typeof define === 'function' && define.amd ? define(['exports', '@lezer/lr', '@lezer/highlight'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.lsp = {}, global.lr, global.highlight));
})(this, (function (exports, lr, highlight) { 'use strict';

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const indent = 133,
    dedent = 134,
    newline$1 = 135,
    blankLineStart = 136,
    newlineBracketed = 137,
    eof = 138,
    ParenL = 8,
    ArrayExpressionNode = 11,
    BracketL = 15,
    CallExpressionNode = 57,
    DictionaryExpressionNode = 61,
    BraceL = 62,
    GroupedExpressionNode = 65;

  const bracketed = new Set([
    GroupedExpressionNode,
    ArrayExpressionNode,
    DictionaryExpressionNode,
    CallExpressionNode,
  ]);

  const newline = "\n".charCodeAt(0);
  const carriageReturn = "\r".charCodeAt(0);
  const space = " ".charCodeAt(0);
  const tab = "\t".charCodeAt(0);
  const hash = "#".charCodeAt(0);

  class IndentLevel {
    constructor(parent, depth) {
      this.parent = parent;
      // -1 means this is not an actual indent level but a set of brackets
      this.depth = depth;
      this.hash =
        (parent ? (parent.hash + parent.hash) << 8 : 0) + depth + (depth << 4);
    }
  }

  const topIndent = new IndentLevel(null, 0);

  function isLineBreak(ch) {
    return ch === newline || ch === carriageReturn;
  }

  const newlines = new lr.ExternalTokenizer(
    (input, stack) => {
      let prev;
      if (input.next < 0) {
        input.acceptToken(eof);
      } else if (stack.context.depth < 0) {
        if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
      } else if (
        ((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&
        stack.canShift(blankLineStart)
      ) {
        let spaces = 0;
        while (input.next === space || input.next === tab) {
          input.advance();
          spaces++;
        }
        if (
          input.next === newline ||
          input.next === carriageReturn ||
          input.next === hash
        )
          input.acceptToken(blankLineStart, -spaces);
      } else if (isLineBreak(input.next)) {
        input.acceptToken(newline$1, 1);
      }
    },
    { contextual: true }
  );

  function countIndent(space) {
    let depth = 0;
    for (let i = 0; i < space.length; i++)
      depth += space.charCodeAt(i) === tab ? 8 - (depth % 8) : 1;
    return depth;
  }

  const trackIndent = new lr.ContextTracker({
    start: topIndent,
    reduce(context, term) {
      return context.depth < 0 && bracketed.has(term) ? context.parent : context;
    },
    shift(context, term, stack, input) {
      switch (term) {
        case indent:
          return new IndentLevel(
            context,
            countIndent(input.read(input.pos, stack.pos))
          );
        case dedent:
          return context.parent;
        case ParenL:
        case BracketL:
        case BraceL:
          return new IndentLevel(context, -1);
        default:
          return context;
      }
    },
    hash(context) {
      return context.hash;
    },
  });

  const indentation = new lr.ExternalTokenizer((input, stack) => {
    const prev = input.peek(-1);
    if (prev !== -1 && prev !== newline) {
      return;
    }

    let spaces = 0;
    while (input.next === space || input.next === tab) {
      input.advance();
      spaces++;
    }

    if (
      (input.next === newline || input.next === hash) &&
      stack.canShift(blankLineStart)
    ) {
      input.acceptToken(blankLineStart, -spaces);
    } else if (spaces > stack.context.depth) {
      input.acceptToken(indent);
    } else if (spaces < stack.context.depth) {
      input.acceptToken(dedent, -spaces);
    }
  });

  const gdscriptHighlighting = highlight.styleTags({
    "for while if elif else return break continue pass assert await match case":
      highlight.tags.controlKeyword,
    "in not and or is del": highlight.tags.operatorKeyword,
    "func class class_name extends const var": highlight.tags.definitionKeyword,
    "preload load": highlight.tags.moduleKeyword,
    "as PI TAU INF NaN": highlight.tags.keyword,
    True: highlight.tags.bool,
    False: highlight.tags.bool,
    Null: highlight.tags.bool,
    Comment: highlight.tags.lineComment,
    Number: highlight.tags.number,
    String: highlight.tags.string,
    UpdateOp: highlight.tags.updateOperator,
    ArithOp: highlight.tags.arithmeticOperator,
    BitOp: highlight.tags.bitwiseOperator,
    CompareOp: highlight.tags.compareOperator,
    AssignOp: highlight.tags.definitionOperator,
    "ClassNode/Identifier ClassNode/ExtendsStatement/Identifier VariableNode/TypeCast/Type/Identifier":
      highlight.tags.definition(highlight.tags.className),
    "( )": highlight.tags.paren,
    "[ ]": highlight.tags.squareBracket,
    "{ }": highlight.tags.brace,
    ".": highlight.tags.derefOperator,
    ", ;": highlight.tags.separator,
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_Identifier = {__proto__:null,assert:12, PI:52, TAU:54, INF:56, NaN:58, var:64, const:74, await:82, in:112, as:118, func:136, preload:150, is:164, class_name:174, extends:178, signal:182, pass:186, return:190, class:200, if:208, elif:212, else:216, for:220, match:224, while:240};
  const parser = lr.LRParser.deserialize({
    version: 14,
    states: "LQQ`QUOOP#rOQOOO%bQYO'#CiO%lQUO'#ChO'bQUO'#CgO'iQYO'#FcOOQQ'#Cz'#CzOOQQ'#Cq'#CqO)lQUO'#CnO)qQUO'#E{O*YQUO'#CmOOQQ'#Fd'#FdO+uQYO'#EbO,PQUO'#EbO,[QUO'#DkO-{QUO'#DnO%qQUO'#DoOOQQ'#Dz'#DzO.QQUO'#ESOOQQ'#Fc'#FcOOQQ'#Fa'#FaO/qQUO'#C_OOQR'#C_'#C_O/yQUO'#EfO,SQUO'#EbOOQR'#F`'#F`OOQR'#Ey'#EyQ`QUOOOOQQ'#Cu'#CuO0XQUO'#CmO0^QUO'#DQO.QQUO'#DUO0cQUO'#EeO0hQUO'#DxO0hQUO'#C`O0mQUO'#EUO0rQUO'#EWO0wQUO'#EYOOQQ'#E['#E[O.QQUO'#E^O0|QUO'#EcO,[QUO'#EgO1RQUO'#EmO1WQUO'#EoO,[QUO'#EwP1]OUO'#F_POOO)CAR)CARO1kQUO'#C}OOQQ,59n,59nO.QQUO,59WOOQQ,5:R,5:RO1pQUO'#CeO1wQUO'#EzO1|QYO,59SOOQQ,59R,59RO4SQUO,59ROOQQ'#E{'#E{O4XQUO'#CmO5nQYO'#FbO5{QUO'#ClO6QQUO'#DqO6VQUO,59RO,[QUO,5:VO6^QUO,59YOOQR,5:|,5:|OOQQ-E8y-E8yO6xQUO,59XO6}QUO,59lO7SQUO,5:}O7XQUO,5;PO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO.QQUO,59rO%qQUO,5:hO.QQUO,59rO7^QUO,59rO1kQUO,5:SO7cQUO,5:kO8rQYO'#DmO8|QUO'#FiO9UQUO,5:VO9ZQYO,5:YO;WQYO,5:ZOOQQ,5:n,5:nO;sQUO'#FRO<QQUO,5:zOOQR,58y,58yOOQQ'#FS'#FSO<]QUO,5;QOOQQ,5;Q,5;QO,[QUO'#EiO<kQUO'#EkOOQR-E8w-E8wO<pQUO,59XO=OQUO,59lOOQQ,59p,59pO6QQUO,5;POOQQ,5:d,5:dOOQQ,58z,58zOOQQ,5:p,5:pOOQQ,5:r,5:rO=^QUO,5:tO=lQYO,5:xO=yQUO,5:}O>RQYO,5;RO>YQUO,5;XO>_QUO,5;ZO>RQYO,5;cPOOO,5;y,5;yP>dOQO,5;yP>lOUO,5;yOOQQ'#DP'#DPOOQQ,59i,59iO>wQYO1G.rOOQQ,59P,59PO?XQUO,59POOQQ'#Ci'#CiOOQQ,5;f,5;fOOQQ-E8x-E8xOOQQ1G.m1G.mO?^QUO,5;|O?hQUO,5;|O?sQUO'#DsO?{QbO'#FnO<kQUO,5:]O@TQUO1G.mO@YQUO1G/qOAPQUO'#CpOOQQ1G.t1G.tOAWQUO1G.sOAfQUO1G/WO=yQUO1G0iO6QQUO1G0kOOQQ1G/^1G/^OCUQYO1G/^OC]QYO1G/^ODtQYO1G/^OF]QYO1G/^OFdQYO1G/^OG{QYO1G/^OHSQYO1G/^OIhQYO1G/^OIrQYO1G/^OI|QYO1G0SOJuQYO1G/^O.QQUO1G/^OOQQ1G/n1G/nOOQQ'#ER'#EROOQQ1G0V1G0VO%qQUO,5:XOKlQUO,5<TOKsQUO,5<TOOQQ1G/q1G/qOK{QUO'#FOOLQQYO1G/tOOQQ1G/u1G/uOOQQ,5;m,5;mOOQQ-E9P-E9POOQR1G0f1G0fOOQQ-E9Q-E9QOOQQ1G0l1G0lO>RQYO,5;TOM}QUO'#DvOOQQ,5;V,5;VOOQQ1G.s1G.sOOQQ1G/W1G/WO<kQUO1G0kOOQQ1G0`1G0`OOQQ1G0i1G0iO<kQUO1G0iOOQQ1G0m1G0mO,[QUO1G0sONUQUO1G0uOOQQ1G0}1G0}POOO1G1e1G1ePNZOQO1G1eOOQQ1G.k1G.kONcQYO,5;lONpQUO1G1hOOQQ-E9O-E9OONzQUO'#DSO! YQUO'#FoO! eQUO'#FoOOQQ,5:_,5:_O! mQUO,5:_O1kQUO'#DuOOQQ,5<Y,5<YOOQQ1G/w1G/wOOQQ7+$X7+$XOOQQ7+%]7+%]O! rQUO'#FeOOQQ,59[,59[O! zQUO,59[OOQQ7+$_7+$_OOQQ7+$r7+$rOOQQ7+&T7+&TO<kQUO7+&TO<kQUO7+&VO.QQUO7+%nO!!qQYO7+$xO!#hQYO1G/sOOQQ,5;i,5;iO!#rQUO1G1oOOQQ-E8{-E8{OOQQ,5;j,5;jOOQQ-E8|-E8|OOQQ1G0o1G0oO!#yQYO,5:bO!$TQVO,5:bOOQQ7+&V7+&VO>RQYO7+&_O!$YQVO7+&aPOOO7+'P7+'PP%qQUO'#FQO%qQUO,5:`O!$_QUO,5<ZO!$gQUO,5<ZOOQQ1G/y1G/yOOQQ,5:a,5:aO!$oQUO,5<PO!$vQUO,5<POOQQ1G.v1G.vOOQQ<<Io<<IoOOQQ<<Iq<<IqO!%OQYO<<IYP,[QUO'#E}OOQR1G/|1G/|O`QUO'#DwOOQQ<<Iy<<IyO!&cQUO<<I{O!&pQYO1G/zO!&zQUO,5;kOOQQ,5;k,5;kO!'VQUO1G1uOOQQ-E8}-E8}OOQQ,5;h,5;hO!'_QUO1G1kOOQQ-E8z-E8zO!'fQVO,5:cOOQQ'#Et'#EtOOQQ'#Eu'#EuOOQQ'#Ev'#EvOOQQ'#Er'#ErO<kQUO'#EqOOQR'#FT'#FTO!'pQVOAN?gO!(TQUO'#EsP!(YQUO'#FPP@_QUO'#E|OOQR1G/}1G/}OOQR,5;],5;]OOQR-E9R-E9ROOQQG25RG25ROOQQ,5;_,5;_O!)oQYO'#CiO!)|QYO'#CiO%qQUO'#ESO,[QUO'#ESO%qQUO'#DUO,[QUO'#DUO%qQUO,59WO,[QUO,59WO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO%qQUO,59rO,[QUO,59rO!*TQYO1G.rO!+oQYO1G.rO!,PQYO1G/^O!,|QYO1G/^O!-pQYO1G/^O!.mQYO1G/^O!/aQYO1G/^O!0^QYO1G/^O!1QQYO1G/^O!1}QYO1G/^O!2qQYO1G/^O!3nQYO1G/^O!4bQYO1G/^O!5_QYO1G/^O!6RQYO1G/^O!7OQYO1G/^O!9VQYO1G/^O!:kQYO1G/^O!:uQYO1G/^O!;PQYO1G/^O!;ZQYO1G/^O!<WQYO1G/^O%qQUO1G/^O,[QUO1G/^O%qQUO7+%nO,[QUO7+%nO!<zQYO7+$xO!=wQYO7+$xO!?oQYO<<IYO!@YQYO<<IYO!@jQYO'#CiO!AQQUO'#ClO!AVQUO'#ClO!A[QUO,59rO!AaQUO,59rO!AfQYO1G0SO!AmQYO1G0SO%qQUO,5:hO%qQUO,5:h",
    stateData: "!Bb~OPOS$QOS#}OS#|PQ~OTQOUrOW`O_SOcWOfVOgVOhVOjlOklOllOmlOpmOunOyoO!XbO!`^O!fpO!mqO!oaO!wbO!ysO!{tO!}uO#PvO#RwO#WxO#[yO#bzO#d{O#l|O$YVO$ZVO$[UO$__O$`_O~O#|}O~OW!TOr!POw!RO^]X{!dX|!dX}!dX!O!dX!P!dX!Q!dX!R!dX!S!dX!T!dX!U!dX!V!dX!W!dX!X!dX!Y!dX!]!dX!q!dX!t!dX#{!dX$O!dX~O#{vX$OvX~P#wO^!UO~OT'}OW`O_SOcWOfVOgVOhVOjlOklOllOmlOpmOunOy&sO!X&qO!`^O!f!^O!mqO!oaO!w&qO$YVO$ZVO$[UO$__O$`_O~OY!WO~P%qOW!TO_!_O!`!`Ow$VX{$VX|$VX}$VX!O$VX!P$VX!Q$VX!R$VX!S$VX!T$VX!U$VX!V$VX!W$VX!X$VX!Y$VX!]$VX!q$VX!t$VX#{$VX$O$VXY$VXo$VXr$VX$^$VXV$VX#T$VX!r$VX!^$VX~OT!aO~O#{!bO$O!bOc#oXp#oXu#oX!f#oX#W#oX~OcWOp!dOu!eO!f!gO#W!fO~Ow!RO{!hO|!iO}!jO!O!kO!P!lO!Q!mO!R!nO!S!oO!T!pO!U!pO!V!qO!W!qO!X!tO!Y!sO!]!uO!q!rO!t!vO~O#{!bO$O!bO~P*kOw!RO#{!bO$O!bO~OT&oOW`O_SOcWOfVOgVOhVOjlOklOllOmlOpmOunOy&tO!X&rO!`^O!f!^O!mqO!oaO!w&rO$YVO$ZVO$[UO$__O$`_O~OT!zO~OT&pOW`O_SOcWOfVOgVOhVOjlOklOllOmlOpmOunOyoO!XbO!`^O!f!^O!mqO!oaO!wbO$YVO$ZVO$[UO$__O$`_O~O#T!}O#{#PO~O#^#TO#`#UO#{#YX$O#YX~OT#WO~OT#XO~OT#ZO~OW!TO~OT#^O~OT#_O~OT#`O~OT#bO~OT#dO~OT#eO~OP#hO#{#gO$O#gO$Q#iO~OT#jO~OV#mO~P%qOT#oO~O^!UOW[a_[aw[a{[a|[a}[a!O[a!P[a!Q[a!R[a!S[a!T[a!U[a!V[a!W[a!X[a!Y[a!][a!`[a!q[a!t[a#{[a$O[aY[ao[ar[a$^[aV[a#T[a!r[a!^[a~OY#rO~OcWOp!dOu!eO~Ow&uO{&wO|&yO}&{O!O&}O!P'PO!Q'RO!R'TO!S'VO!T'XO!U'XO!V'ZO!W'ZO!X(QO!Y']O!]!uO!q(UO!t!vO~Oo#sOY$UXV$UX~P4dOw&uO~OW#uO~OY#rO~P%qOW#zOcbapbauba!fba#Wba#{ba$Oba~OT#|O~OT#}O~OT$OO~OT$PO~O!Y$^O~OT$`O~Ow&vO{&xO|&zO}&|O!O'OO!P'QO!Q'SO!R'UO!S'WO!T'YO!U'YO!V'[O!W'[O!X(RO!Y'^O!]!uO!q(VO!t!vO~Or$bO$^$bO~P7hOo$cO!^$]X~O!^$eO~O$a$fOw!ba{!ba|!ba}!ba!O!ba!P!ba!Q!ba!R!ba!S!ba!T!ba!U!ba!V!ba!W!ba!X!ba!Y!ba!]!ba!q!ba!t!ba#{!ba$O!baY!bao!bar!ba$^!baV!ba#T!ba!r!ba!^!ba~OV$hO~P4dOUrO!ysO!{tO!}uO#PvO#RwO~O#T#uX#{#uX$O#uX~P;_O#T!}O#{$kO$O$kO~O#^#TO#`#UO#{#Ya$O#Ya~Or$oO~Or!POwaa#{aa$Oaa~Or!POwta#{ta$Ota~OW!TO#T!|a#{!|a$O!|a~O#T#Qa#{#Qa$O#Qa~P*kOr$oO!{tO~Or$oO~P7hO!Y$xO~Or$yO~O#{${O$O${O~OP$|O#{${O$O${O~Ow`i#{`i$O`i#T`i~P*nOV$}O~OY$UaV$Ua~P%qOo%POY$UaV$Ua~OT%ROV%UO~O$d%WOr$bX~OY%ZO~O!^%[O~OfVOgVOhVOjlOklOllOmlO$YVO$ZVO$[UO~OV%^O~P@_Or!POwai#{ai$Oai~Or!POwti#{ti$Oti~O{!hOwzi}zi!Ozi!Pzi!Qzi!Rzi!Szi!Tzi!Uzi!Vzi!Wzi!Xzi!Yzi!]zi!qzi!tzi#{zi$Ozi#Tzi~O|zi~PAtO|!iO~PAtO{!hO|!iO}!jOwzi!Pzi!Qzi!Rzi!Szi!Tzi!Uzi!Vzi!Wzi!Xzi!Yzi!]zi!qzi!tzi#{zi$Ozi#Tzi~O!Ozi~PCdO{!hO|!iO}!jO!O!kO!R!nO!S!oOwzi!Pzi!Tzi!Uzi!Vzi!Wzi!Xzi!Yzi!]zi!qzi!tzi#{zi$Ozi#Tzi~O!Q!mO~PD{O!Qzi~PD{O{!hO|!iO}!jO!O!kOwzi!Pzi!Qzi!Rzi!Tzi!Uzi!Vzi!Wzi!Xzi!Yzi!]zi!qzi!tzi#{zi$Ozi#Tzi~O!S!oO~PFkO!O!kO~PCdO{!hO|!iO}!jO!O!kO!P!lO!Q!mO!R!nO!S!oO!X!tO!Y!sO!t!vOwzi!Vzi!Wzi!]zi!qzi#{zi$Ozi#Tzi~O!Tzi!Uzi~PHZO!T!pO!U!pO~PHZO!r%eO~P4dOwzi!Tzi!Uzi!Vzi!Wzi!Xzi!Yzi!]zi!qzi!tzi~O{!hO|!iO}!jO!O!kO!P!lO!Q!mO!R!nO!S!oO#{zi$Ozi#Tzi~PJTO!^$]a~P,[Oo%iO!^$]a~OT%kO~O$a$fOw!bi{!bi|!bi}!bi!O!bi!P!bi!Q!bi!R!bi!S!bi!T!bi!U!bi!V!bi!W!bi!X!bi!Y!bi!]!bi!q!bi!t!bi#{!bi$O!biY!bio!bir!bi$^!biV!bi#T!bi!r!bi!^!bi~O#{%oO~P.QO#{%rO~O#{%sO$O%sO~OY#tao#taV#ta~P4dOY$UiV$Ui~P%qOr!POVvXovXwvX~Oo%vOw%uOV$cX~Oo%vOV$cX~OV%xO~Oo%zOV$XX~OV%|O~Owzq!Tzq!Uzq!Vzq!Wzq!Xzq!Yzq!]zq!qzq!tzq~O{!hO|!iO}!jO!O!kO!P!lO!Q!mO!R!nO!S!oO#{zq$Ozq#Tzq~P!!POo!ai!^!ai~P4dO!^$]i~P,[O#{&RO$O&RO~P*kO#y&SO~O#y&UO~OT%ROV$ca~Oo&YOV$ca~OV$Xa~P@_Oo&]OV$Xa~O{!hO|!iO}!jO!O!kO!P!lO!Q!mO!R!nO!S!oO!T!pO!U!pO!V!qO!W!qO!X!tO!Y!sO!q!rO!t!vOw!py!]!py#{!py$O!py#T!py~OT&`Op&gO$e&bO~P@_OV!hio!hi~P4dOw%uOV#sao#sa~OT%ROV$ci~OV$Xi~P@_O#z&jO$O&jO~P`OT&`Op&gO#z&mO$O&mO$e&bO~P@_OT&nO~OT%RO~OW!TOr!PO^]X{!dX|!dX}!dX!O!dX!P!dX!Q!dX!R!dX!S!dX!T!dX!U!dX!V!dX!W!dX!X!dX!Y!dX!]!dX!q!dX!t!dX~Ow&vOr!dX$^!dX~P!(_O#T!dX~P#wOY`io`iw`iV`i!r`i!^`i~P4gO{&xO|&zO}&|O!O'OO!P'QO!Q'SO!R'UO!S'WO!T'YO!U'YO!V'[O!W'[O!X(RO!Y'^O!q(VO!t!vO~O!]!uOr`iw`i$^`i~P!*kO{&wOYziozi|zi}zi!Ozi!Pzi!Qzi!Rzi!SziVzi!rzi!^zi~PJTO{&xOrzi|zi}zi!Ozi!Pzi!Qzi!Rzi!Szi$^zi~PJTO{&wO|&yOYziozi}zi!Ozi!Pzi!Qzi!Rzi!SziVzi!rzi!^zi~PJTO{&xO|&zOrzi}zi!Ozi!Pzi!Qzi!Rzi!Szi$^zi~PJTO{&wO|&yO}&{OYziozi!Ozi!Pzi!Qzi!Rzi!SziVzi!rzi!^zi~PJTO{&xO|&zO}&|Orzi!Ozi!Pzi!Qzi!Rzi!Szi$^zi~PJTO{&wO|&yO}&{O!O&}O!Q'RO!R'TO!S'VOYziozi!PziVzi!rzi!^zi~PJTO{&xO|&zO}&|O!O'OO!Q'SO!R'UO!S'WOrzi!Pzi$^zi~PJTO{&wO|&yO}&{O!O&}O!R'TO!S'VOYziozi!Pzi!QziVzi!rzi!^zi~PJTO{&xO|&zO}&|O!O'OO!R'UO!S'WOrzi!Pzi!Qzi$^zi~PJTO{&wO|&yO}&{O!O&}O!S'VOYziozi!Pzi!Qzi!RziVzi!rzi!^zi~PJTO{&xO|&zO}&|O!O'OO!S'WOrzi!Pzi!Qzi!Rzi$^zi~PJTO{&wO|&yO}&{O!O&}OYziozi!Pzi!Qzi!Rzi!SziVzi!rzi!^zi~PJTO{&xO|&zO}&|O!O'OOrzi!Pzi!Qzi!Rzi!Szi$^zi~PJTO{&wO|&yO}&{O!O&}O!P'PO!Q'RO!R'TO!S'VO!X(QO!Y']O!t!vOYzioziwzi!Vzi!Wzi!]zi!qziVzi!rzi!^zi~O!Tzi!Uzi~P!7rO{&xO|&zO}&|O!O'OO!P'QO!Q'SO!R'UO!S'WO!X(RO!Y'^O!t!vOrziwzi!Vzi!Wzi!]zi!qzi$^zi~O!Tzi!Uzi~P!9aO!T'XO!U'XO~P!7rO!T'YO!U'YO~P!9aO{&wO|&yO}&{O!O&}O!P'PO!Q'RO!R'TO!S'VOYzioziVzi!rzi!^zi~PJTO{&xO|&zO}&|O!O'OO!P'QO!Q'SO!R'UO!S'WOrzi$^zi~PJTO{&wO|&yO}&{O!O&}O!P'PO!Q'RO!R'TO!S'VOYzqozqVzq!rzq!^zq~P!!PO{&xO|&zO}&|O!O'OO!P'QO!Q'SO!R'UO!S'WOrzq$^zq~P!!PO{&wO|&yO}&{O!O&}O!P'PO!Q'RO!R'TO!S'VO!T'XO!U'XO!V'ZO!W'ZO!X(QO!Y']O!q(UO!t!vO~OY!pyo!pyw!py!]!pyV!py!r!py!^!py~P!>kOr!pyw!py!]!py$^!py~P!*kOw&uOY!dXo!dXV!dX!r!dX!^!dX~P!(_Ow&vO~Ow!RO~O!Y'uO~O!Y'vO~O!r'wO~P4dO!r'xO~P4dO$Y$Zf!T!V!Xgh$[!o$eT^$a$^$ar!wr{|}!q}!rw!r~",
    goto: "@q$dPPP$e$kPPPP$rP%S&s(dPP%S*W+wP-l-oPPP/lPPPP/lPP1cP1v*WP2PP%SP%SPPPPPPPPPPPPPP%S%SPP%SP3x%S%S%S%SP4R4W4`4c5Y%SP%SP%SPP%SP5]%SP$kP5`P$kP$kP$kP5mP$e5sP5s5s5yP6PP6TP5sP5sP6Z6_6c6c6c6c5sP6g6q6w8n8t8z9Q9X9_9e9kPPPPPPPPP9q9t9z:T:^>e@[PPP@_PPPP@e@nXiOk&S&_ZdOk!}&S&_Y!SQT&o&p'}Q#[qQ#]rR$t#`$]cOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(V$]TOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(V$[ROS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VR#p!U$]ZOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VWXOk&S&_$X!YSY^`bowy|!R!T!Z!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VR#{!a$[cOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VQ%]#zU&[%z&]&iT&a&U&f$iVOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s#z$^$b$c$o$x%P%e%i%t%u%z&Q&S&U&]&_&f&i&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VY!QQ%R&o&p'}Q$q#WQ$r#XQ%`#|R%a#}Q#k!PQ$_!uR%y%W$[ZOS^`bkowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&S&_&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VQ%S#uV&W%v&Y&hS!x^!`V%h$c%i&QV#v!^#Z$PQ%T#uV&X%v&Y&hR%X#vQ$p#UQ$u#bQ$w#cQ$z#fQ%Y#wS%b$O$vQ%m$nQ%p$sQ%}%cQ&O%dQ&T%qR&k&dR&R%oR$a!vYdOk!}&S&_Q$v#bR%c$OXfOk&S&_XhOk&S&_XgOk&S&_T#Qg#RQ#SgR$m#RT&e&U&fT&d&U&fT&c&U&fQkOS#Vk&_R&_&SQ!VRR#q!VWYOk&S&_$S!ZS^`bowy|!R!T!_!`!h!i!j!k!l!m!n!o!p!q!r!s#T#s$^$b$c$o$x%P%e%i%t%u&Q&q&r&s&t&u&v&w&x&y&z&{&|&}'O'P'Q'R'S'T'U'V'W'X'Y'Z'[']'^'u'v'w'x(U(VT!cY!ZQ%{%]R&^%{Q$d!xR%j$dQ$g!zR%l$gS%w%S%TR&Z%wQ#t![R%Q#tQ#OeR$j#OQ#RgR$l#RQ&f&UR&l&fR!OPXjOk&S&_WeOk&S&_R$i!}Q!XSQ#n!TR#x!_W[Ok&S&_U![S!T!_Y!w^!`$c%i&QQ!{`U!|b&q&rU#Yo&s&tQ#awQ#cyQ#f|Q#l!RU$Q!h&w&xQ$R!iQ$S!jQ$T!kQ$U!lQ$V!mQ$W!nQ$X!oQ$Y!pQ$Z!qQ$[!rQ$]!sQ$n#TU%O#s%P%tQ%f$^Q%g$bQ%n$oQ%q$xQ&P%eQ&V%uQ'_&uQ'`&vQ'a&yQ'b&zQ'c&{Q'd&|Q'e&}Q'f'OQ'g'PQ'h'QQ'i'RQ'j'SQ'k'TQ'l'UQ'm'VQ'n'WQ'o'XQ'p'YQ'q'ZQ'r'[Q's']Q't'^Q'y'uQ'z'vQ'{'wQ'|'xQ(S(UR(T(VW]Ok&S&_!Y!]S`!T!_!r#s$b%P%t%u&q&s&u&w&y&{&}'P'R'T'V'X'Z']'u'w(U(V!S(O^y|!`#T$c$x%i&Q&r&t&v&x&z&|'O'Q'S'U'W'Y'['^'v'xu(Pbow!R!h!i!j!k!l!m!n!o!p!q!s$^$o%eR%_#zQ!y^R#y!`Q#w!^Q$s#ZR%d$PR%V#u",
    nodeNames: "⚠ Comment Script SimpleStatement AssertNode Identifier assert ) ( CallParams ] ArrayExpressionNode SubscriptExpressionNode VariableName . [ AssignmentExpressionNode VariableNode AnnotationNode @ CallParams LiteralExpressionNode True False Null BuiltinConstants PI TAU INF NaN String , var TypeCast : Type ConstantNode const ParameterNode AssignOp AwaitExpressionNode await BinaryOperatorExpressionNode ArithOp ArithOp ArithOp BitOp CompareOp BitOp BitOp BitOp AndOp LogicOp OrOp LogicOp NotOp in CallExpressionNode CastExpressionNode as } DictionaryExpressionNode { DictionaryEntry GetNodeExpressionNode GroupedExpressionNode IdentifierExpressionNode LambdaExpressionNode func CallParams AssignmentExpressionNode FunctionReturnType Body SuiteNode PreloadExpressionNode preload SelfExpressionNode SelfToken TernaryOperatorExpressionNode TernaryOp TernaryOp TypeTestExpressionNode is ClassName UnaryOperatorNode ArithOp ClassNameStatement class_name ExtendsStatement extends SignalStatement signal PassStatement pass ReturnNode return StatementGroup ; CompoundStatement ClassNode class FunctionNode IfNode IfClause if ElifClause elif ElseClause else ForNode for MatchNode match MatchBranchNode PatternNode VarPatternNode IdentifierPatternNode LiteralPatternNode WildcardPatternNode WhileNode while",
    maxTerm: 159,
    context: trackIndent,
    nodeProps: [
      ["group", -2,3,98,"Statement",-18,11,12,16,21,40,42,57,58,61,64,65,66,67,74,76,78,81,84,"ExpressionNode",-3,17,36,38,"AssignableNode"],
      ["openedBy", 7,"("],
      ["closedBy", 8,")"]
    ],
    propSources: [gdscriptHighlighting],
    skippedNodes: [0,1],
    repeatNodeCount: 11,
    tokenData: "@V~R|XY#{pq#{qr$Wrs$est(Vtu(quv(vvw(}wx)[xy,|yz-Rz{-W{|-e|}-l}!O-q!O!P.Q!P!Q.y!Q!R/Q!R![1a![!]1u!]!^1|!^!_2R!_!`2c!`!a2m!a!b2x!b!c2}!c!}3S!}#O3e#P#Q3j#Q#R3o#R#S3t#T#U4X#U#Y3S#Y#Z5l#Z#b3S#b#c7|#c#d:z#d#g3S#g#h;v#h#i=r#i#o3S#o#p?n#p#q?s#q#r@Q~$QQ$Q~XY#{pq#{R$]P!wP!_!`$`Q$eO!PQ~$hXOY$eZ]$e^r$ers%Ts#O$e#O#P%u#P;'S$e;'S;=`(P<%lO$e~%YX$[~OY$eZ]$e^r$ers%Ts#O$e#O#P%u#P;'S$e;'S;=`(P<%lO$e~%xVO#i$e#i#j&_#j#l$e#l#m&z#m;'S$e;'S;=`(P<%lO$e~&bS!Q![&n!c!i&n#T#Z&n#o#p'd~&qR!Q![&z!c!i&z#T#Z&z~&}R!Q!['W!c!i'W#T#Z'W~'ZR!Q![$e!c!i$e#T#Z$e~'gR!Q!['p!c!i'p#T#Z'p~'sS!Q!['p!c!i'p#T#Z'p#q#r$e~(SP;=`<%l$e~([TP~OY(VZ](V^;'S(V;'S;=`(k<%lO(V~(nP;=`<%l(V~(vO$_~R(}O$`P|Q~)SP!S~vw)V~)[O!U~~)_XOY)[Z])[^w)[wx)zx#O)[#O#P*l#P;'S)[;'S;=`,v<%lO)[~*PX$[~OY)[Z])[^w)[wx)zx#O)[#O#P*l#P;'S)[;'S;=`,v<%lO)[~*oVO#i)[#i#j+U#j#l)[#l#m+q#m;'S)[;'S;=`,v<%lO)[~+XS!Q![+e!c!i+e#T#Z+e#o#p,Z~+hR!Q![+q!c!i+q#T#Z+q~+tR!Q![+}!c!i+}#T#Z+}~,QR!Q![)[!c!i)[#T#Z)[~,^R!Q![,g!c!i,g#T#Z,g~,jS!Q![,g!c!i,g#T#Z,g#q#r)[~,yP;=`<%l)[~-ROW~~-WOV~~-]P|Qz{-`~-eO{~R-lO!wP}Q~-qOo~V-xP!wP}Q!`!a-{S.QO$dS~.VP^~!Q![.Y~._Q$Z~!g!h.e#X#Y.e~.hQ{|.n}!O.n~.qP!Q![.t~.yO$Z~~/QO$a~|Q~/VX$Y~!O!P/r!Q![/x!d!e0Z!g!h.e!z!{0r#R#S0T#U#V0Z#X#Y.e#l#m0r~/uP!Q![.Y~/}Q$Y~!Q![/x#R#S0T~0WP!Q![/x~0^Q!Q!R0d!R!S0d~0iR$Y~!Q!R0d!R!S0d#R#S0Z~0uR!Q![1O!c!i1O#T#Z1O~1TS$Y~!Q![1O!c!i1O#R#S0r#T#Z1O~1fT$Y~!O!P/r!Q![/x!g!h.e#R#S0T#X#Y.e~1|Or~!r~~2RO#T~~2WQ!PQ!^!_2^!_!`$`~2cO!O~~2jP$^~w~!_!`$`~2rQ!PQ!_!`$`!`!a2^~2}O!q~~3SOc~~3XST~!Q![3S!c!}3S#R#S3S#T#o3S~3jO_~~3oOY~~3tO!R~~3{S$e~T~!Q![3S!c!}3S#R#S3S#T#o3S~4^UT~!Q![3S!c!}3S#R#S3S#T#b3S#b#c4p#c#o3S~4uUT~!Q![3S!c!}3S#R#S3S#T#W3S#W#X5X#X#o3S~5`S!T~T~!Q![3S!c!}3S#R#S3S#T#o3S~5qTT~!Q![3S!c!}3S#R#S3S#T#U6Q#U#o3S~6VUT~!Q![3S!c!}3S#R#S3S#T#`3S#`#a6i#a#o3S~6nUT~!Q![3S!c!}3S#R#S3S#T#g3S#g#h7Q#h#o3S~7VUT~!Q![3S!c!}3S#R#S3S#T#X3S#X#Y7i#Y#o3S~7pSg~T~!Q![3S!c!}3S#R#S3S#T#o3S~8RWT~!Q![3S!c!}3S#R#S3S#T#c3S#c#d8k#d#i3S#i#j9g#j#o3S~8pUT~!Q![3S!c!}3S#R#S3S#T#h3S#h#i9S#i#o3S~9ZS!X~T~!Q![3S!c!}3S#R#S3S#T#o3S~9lUT~!Q![3S!c!}3S#R#S3S#T#`3S#`#a:O#a#o3S~:TUT~!Q![3S!c!}3S#R#S3S#T#`3S#`#a:g#a#o3S~:nSh~T~!Q![3S!c!}3S#R#S3S#T#o3S~;PUT~!Q![3S!c!}3S#R#S3S#T#f3S#f#g;c#g#o3S~;jS!V~T~!Q![3S!c!}3S#R#S3S#T#o3S~;{UT~!Q![3S!c!}3S#R#S3S#T#X3S#X#Y<_#Y#o3S~<dUT~!Q![3S!c!}3S#R#S3S#T#`3S#`#a<v#a#o3S~<{UT~!Q![3S!c!}3S#R#S3S#T#Y3S#Y#Z=_#Z#o3S~=fS!o~T~!Q![3S!c!}3S#R#S3S#T#o3S~=wUT~!Q![3S!c!}3S#R#S3S#T#f3S#f#g>Z#g#o3S~>`UT~!Q![3S!c!}3S#R#S3S#T#i3S#i#j>r#j#o3S~>wUT~!Q![3S!c!}3S#R#S3S#T#X3S#X#Y?Z#Y#o3S~?bSf~T~!Q![3S!c!}3S#R#S3S#T#o3S~?sO!`~~?xP!Q~#p#q?{~@QO!W~~@VO!^~",
    tokenizers: [indentation, newlines, 0, 1, 2],
    topRules: {"Script":[0,2]},
    specialized: [{term: 5, get: value => spec_Identifier[value] || -1}],
    tokenPrec: 3624
  });

  exports.parser = parser;

}));
